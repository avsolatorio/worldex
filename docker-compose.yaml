version: "3.9"

services:
  web:
    restart: always
    build:
      context: ./ui/
      dockerfile: nginx.Dockerfile
    ports:
      - 80:80
    volumes:
      - ./ui/nginx.conf:/etc/nginx/conf.d/default.conf
    env_file:
      - ./ui/.env
    depends_on:
      - api
    profiles: ["web"]
  preview:
    build:
      context: ./ui/
      dockerfile: preview.Dockerfile
    command: yarn serve
    ports:
      - 4173:4173
    volumes:
      - ./ui:/app
      - /app/node_modules/
    env_file:
      - ./ui/.env
    depends_on:
      - api
    profiles: ["preview"]
  cors-anywhere:
    build:
      context: ./cors-anywhere
    ports:
      - 8088:8080
  api:
    restart: always
    build:
      context: ./api
    command: poetry run uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
    # command: poetry run gunicorn app.main:app --workers 8 --worker-class uvicorn.workers.UvicornWorker --reload --bind 0.0.0.0:8000
    ports:
      - 8000:8000
    env_file:
      - secrets/api.env
    volumes:
      - ./api:/app
      - /app/.venv/
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: curl --fail localhost:8000/health_check || exit 1
  db:
    restart: always
    build:
      context: ./postgis-h3
      # comment out the following for better performance on an ARM-based device (e.g. M1/M2 MacBooks)
      dockerfile: arm64.Dockerfile
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./postgis-h3/postgresql.8gb.conf:/etc/postgresql/postgresql.conf
    ports:
      - 5432:5432
    env_file:
      - secrets/db.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
  pgweb:
    image: sosedoff/pgweb
    ports:
      - 8081:8081
    env_file:
      - ./secrets/pgweb.env
    depends_on:
      db:
        condition: service_healthy
  es:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.2
    ports:
      - 9200:9200
    environment:
      - xpack.security.enabled=true
      - discovery.type=single-node
      - ELASTIC_PASSWORD=changeme

  # setup:
    # image: docker.elastic.co/elasticsearch/elasticsearch:8.13.2
  #   volumes:
  #     - certs:/usr/share/elasticsearch/config/certs
  #   user: "0"
  #   command: >
  #     bash -c '
  #       # if [ x${ELASTIC_PASSWORD} == x ]; then
  #       #   echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
  #       #   exit 1;
  #       # elif [ x${KIBANA_PASSWORD} == x ]; then
  #       #   echo "Set the KIBANA_PASSWORD environment variable in the .env file";
  #       #   exit 1;
  #       # fi;
  #       if [ ! -f config/certs/ca.zip ]; then
  #         echo "Creating CA";
  #         bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
  #         unzip config/certs/ca.zip -d config/certs;
  #       fi;
  #       if [ ! -f config/certs/certs.zip ]; then
  #         echo "Creating certs";
  #         echo -ne \
  #         "instances:\n"\
  #         "  - name: es\n"\
  #         "    dns:\n"\
  #         "      - es\n"\
  #         "      - localhost\n"\
  #         "    ip:\n"\
  #         "      - 127.0.0.1\n"\
  #         > config/certs/instances.yml;
  #         bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
  #         unzip config/certs/certs.zip -d config/certs;
  #       fi;
  #       echo "Setting file permissions"
  #       chown -R root:root config/certs;
  #       find . -type d -exec chmod 750 \{\} \;;
  #       find . -type f -exec chmod 640 \{\} \;;
  #       echo "Waiting for Elasticsearch availability";
  #       until curl -s --cacert config/certs/ca/ca.crt https://es:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
  #       echo "Setting kibana_system password";
  #       until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:U5BVrM9KQpez7aoMAGQq" -H "Content-Type: application/json" https://es:9200/_security/user/kibana_system/_password -d "{\"password\":\"U5BVrM9KQpez7aoMAGQq\"}" | grep -q "^{}"; do sleep 10; done;
  #       echo "All done!";
  #     '
  #   healthcheck:
  #     test: ["CMD-SHELL", "[ -f config/certs/es/es.crt ]"]
  #     interval: 1s
  #     timeout: 5s
  #     retries: 120
  # es:
  #   depends_on:
  #     setup:
  #       condition: service_healthy
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.13.2
  #   volumes:
  #     - certs:/usr/share/elasticsearch/config/certs
  #     - esdata:/usr/share/elasticsearch/data
  #   ports:
  #     - 9200:9200
  #   environment:
  #     - node.name=es
  #     - cluster.name=worldex-cluster
  #     - cluster.initial_master_nodes=es
  #     - discovery.seed_hosts=es02,es03
  #     - ELASTIC_PASSWORD=U5BVrM9KQpez7aoMAGQq
  #     - bootstrap.memory_lock=true
  #     - xpack.security.enabled=true
  #     - xpack.security.http.ssl.enabled=true
  #     - xpack.security.http.ssl.key=certs/es/es.key
  #     - xpack.security.http.ssl.certificate=certs/es/es.crt
  #     - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
  #     - xpack.security.transport.ssl.enabled=true
  #     - xpack.security.transport.ssl.key=certs/es/es.key
  #     - xpack.security.transport.ssl.certificate=certs/es/es.crt
  #     - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
  #     - xpack.security.transport.ssl.verification_mode=certificate
  #     - xpack.license.self_generated.type=basic
  #   mem_limit: 1073741824
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   healthcheck:
  #     test:
  #       [
  #         "CMD-SHELL",
  #         "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
  #       ]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 120
  # kibana:
  #   depends_on:
  #     es:
  #       condition: service_healthy
  #   image: docker.elastic.co/kibana/kibana:8.13.2
  #   volumes:
  #     - certs:/usr/share/kibana/config/certs
  #     - kibanadata:/usr/share/kibana/data
  #   ports:
  #     - 5601:5601
  #   environment:
  #     - SERVERNAME=kibana
  #     - ELASTICSEARCH_HOSTS=https://es:9200
  #     - ELASTICSEARCH_USERNAME=kibana_system
  #     - ELASTICSEARCH_PASSWORD=U5BVrM9KQpez7aoMAGQq
  #     - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
  #   mem_limit: 1073741824
  #   healthcheck:
  #     test:
  #       [
  #         "CMD-SHELL",
  #         "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
  #       ]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 120
volumes:
  pg_data:
  # certs:
  #   driver: local
  # esdata:
  #   driver: local
  # kibanadata:
  #   driver: local